-- Initial ohua.cabal generated by epm init.  For further documentation,
-- see http://haskell.org/cabal/users-guide/

name:                ohua
version:             0.7.2
synopsis:            Ohua - An EDSL for implicit parallel programming of stateful computations that execute on a dataflow runtime system.
-- description:
homepage:            https://bitbucket.org/sertel/ohua
license:             OtherLicense
license-file:        LICENSE.txt
author:              Sebastian Ertel, Justus Adam
maintainer:          dev@justus.science
-- copyright:
category:            Concurrency
build-type:          Simple
extra-source-files:  README.md
cabal-version:       >=1.10

flag debug
  -- true for now, later this should be false
  default: False

library
  exposed-modules:      Ohua.IR.Transform
                      , Ohua.IR.Transform.Pmap
                      , Ohua.IR.Transform.DeadCodeElimination
                      , Ohua.Compat
                      , Ohua.ALang.Conversion.Native

  -- other-modules:
  -- other-extensions:
  build-depends:        base >=4.8 && <4.9
                      , transformers
                      , microlens == 0.4.7.0
                      , microlens-mtl == 0.1.10.0
                      , unordered-containers
                      , mtl
                      , hashable >= 1.2.4.0 && <= 1.2.6.0
                      , containers
                      , extra == 1.5.2
                      , monad-loops
                      , deepseq==1.4.2.0
                      , ohua
  hs-source-dirs:      src/eta
  default-language:    Haskell2010
  java-sources:        
    -- It's better not to depend on class files as they are generated
    -- I'd hope at some point we can depend on the clojure source directly
      target/classes/com/ohua/ir/IRFunc.class 
    , src/java/com/ohua/util/Expr.java
    , src/java/com/ohua/util/FnName.java
    , src/java/com/ohua/util/ResolvedSymbol.java
    , src/java/com/ohua/util/Assignment.java
    , src/java/com/ohua/util/Binding.java
  default-extensions:  
      OverloadedStrings
    , MultiParamTypeClasses
    , FunctionalDependencies
    , TypeFamilies
    , FlexibleContexts
    , FlexibleInstances
    , TypeSynonymInstances
    , LambdaCase
  if flag(debug)
    cpp-options: -DDEBUG=1

-- test-suite ouha-test
--  main-is:             Spec.hs
--  hs-source-dirs:      eta-test
--  default-language:    Haskell2010
--  build-depends:       base >=4.8 && <4.9
--                     , HUnit==1.5.0.0
--                     , hspec
--                     , ohua
--                     , directory==1.3.0.0
--                     , tf-random==0.5
--
--  type:                exitcode-stdio-1.0
--  default-extensions:  OverloadedStrings

